#include <stdio.h>
#include <stdlib.h>
#include <strings.h>
#include <windows.h>


typedef struct elementos {
    char nome[100];	
} t_elemento;

typedef struct no {
    struct no * esq;
    t_elemento dado;
    struct no * dir;
} t_no;

typedef t_no* t_arvore;

//==============================================================================

int isVazia (t_no * no){
    return (no == NULL);
}

//==============================================================================

t_no * criar (){
    t_no * no = (t_no*) malloc(sizeof(t_no));

    if (no) no->esq = no->dir = NULL;

    return no;
}

//==============================================================================

void exibirPreOrdem(t_arvore tree) {
    if (tree!=NULL) {
        printf("%s ", tree->dado.nome);
        exibirPreOrdem(tree->esq);
        exibirPreOrdem(tree->dir);
    }
}

void exibirInOrdem(t_arvore tree) {
    if (tree!=NULL) {
        exibirInOrdem(tree->esq);
        printf("%s ", tree->dado.nome);
        exibirInOrdem(tree->dir);
    }
}

void exibirPosOrdem(t_arvore tree){
    if (tree!=NULL) {
        exibirPosOrdem(tree->esq);
        exibirPosOrdem(tree->dir);
        printf("%s ", tree->dado.nome);
    }
}

//=============================================================================

void gotoxy(int coluna, int linha){        
    COORD point;
point.X = coluna;
point.Y = linha;
SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), point);
}


//=============================================================================

void exibirGraficamente(t_arvore tree, int col, int lin, int desloc){
    if (tree == NULL) return; 
    gotoxy(col,lin);
    printf("%s",tree->dado.nome);
    if (tree->esq != NULL)
        exibirGraficamente(tree->esq,col-desloc,lin+2,desloc/2+1);
    if (tree->dir != NULL)
        exibirGraficamente(tree->dir,col+desloc,lin+2,desloc/2+1);
}


//==============================================================================

void esvaziar(t_arvore *tree){
    
	if (*tree == NULL) return;
    esvaziar(&(*tree)->esq);
    esvaziar(&(*tree)->dir);
    free(*tree);
    *tree = NULL;
}

//==============================================================================

t_no * busca(t_arvore tree, t_elemento dado){

    if (tree == NULL) 
        return NULL;
    if (strcmp(tree->dado.nome, dado.nome)==0)
        return tree;

    if (strcmp(tree->dado.nome, dado.nome)>0)
        return busca(tree->esq, dado);
    else
        return busca(tree->dir, dado);
}

//==============================================================================

t_no * buscaSetPai(t_arvore tree, t_elemento dado, t_no ** pai){

    if (tree == NULL) {
        *pai = NULL;
        return NULL;
    }
    if (strcmp(tree->dado.nome, dado.nome)==0)
        return tree;

    if (strcmp(tree->dado.nome, dado.nome)>0) {
        *pai = tree;
        return buscaSetPai(tree->esq, dado, pai);
    }
    else {
        *pai = tree;
        return buscaSetPai(tree->dir, dado, pai);
    }
}

//==============================================================================

int inserir (t_arvore *tree, t_elemento item){
    int ok;
    
    if (*tree == NULL) {
        *tree = criar();
        if (*tree == NULL) return 0;
        (*tree)->dado = item;
        return 1;
    }
    if (strcmp((*tree)->dado.nome, item.nome)<0)
        ok = inserir (&((*tree)->dir), item);
    else
        if (strcmp((*tree)->dado.nome, item.nome)>0)
            ok = inserir (&((*tree)->esq), item);
        else
            ok = 0;
    return ok;
}

//================================================================================

int remover (t_arvore *tree, t_elemento item) {
    t_no *no, *pai, *sub, *paiSuce, *suce;
    no = *tree; 
	pai=NULL;
    
    no = buscaSetPai(*tree, item, &pai);
    if (no==NULL) return 0;

    if (no->esq == NULL)
        sub = no->dir;
    else {
        if (no->dir == NULL)
           sub = no->esq;
        else{
        	 paiSuce=no;
             sub = no->dir;
             suce = sub->esq;
             while (suce != NULL) {
                   paiSuce = sub;
                   sub = suce;
                   suce = sub->esq;
             }
            
             if (paiSuce != no) {
                paiSuce->esq = sub->dir;
                sub->dir = no->dir;
             }
             sub->esq = no->esq;
        }
    }
    if (pai == NULL)
       *tree = sub;
    else
        if (no == pai->esq)
            pai->esq = sub;
        else
            pai->dir = sub;
    free(no);
    return 1;
}

//==========================================================================

int menu(){
	int valor = 0;
	
	printf("ALUNO: HENRIQUE SERGIO DE AQUINO\n");
	printf("DISCIPLINA: ESTRUTURA DE DADOS I\n");
	printf("PROFESSOR: WALACE BONFIM\n");
	printf("==================================\n");
	printf("\n");
	printf("OBS: O programa ler um arquivo txt nomeado 'arvore' de strings separadas por espaco\n");
	printf("     se nao houver executa normalmente as funcoes.\n");
	printf("\n");
	printf("==================================\n");
	printf("###    EDITOR DE ARVORE   ###\n");
	printf("[ 1 ] - Inserir\n");
	printf("[ 2 ] - Remover apenas um no\n");
	printf("[ 3 ] - Pesquisar\n");
	printf("[ 4 ] - Esvaziar a arvore\n");
	printf("[ 5 ] - Exibir a arvore\n");
	printf("[ 0 ] - Sair\n");
	printf("Digite sua opcao: ");
	scanf("%d", &valor);
	getchar();
	
	return valor;
}

//=====================================================================

main (){
	
	t_arvore arvore = NULL;
	t_elemento dado;
	t_no * aux = NULL;
	int laco = 1;
	
	FILE * arq = NULL;
	
	arq = fopen("arvore.txt", "r");
	
	if(arq != NULL){
		while(!feof(arq)){
			fscanf(arq, "%s", dado.nome);
			inserir(&arvore, dado);
		}
	}
	
	while(laco){
		switch(menu()){
			case 1 : printf("Digite o dado para inserir: \n");
					 scanf("%[ -~]", &dado.nome);
					 getchar();
					 inserir(&arvore, dado);
					 break;
					 
			case 2 : printf("Digite o dado que deseja remover: \n");
					 scanf("%[ -~]", &dado.nome);
					 getchar(); 				 
					 remover(&arvore, dado);
					 break;
					 
			case 3 : printf("Digite o elemento para pesquisar: \n");
					 scanf("%[ -~]", &dado.nome);
					 getchar();
					 aux = busca(arvore, dado);
					 if(aux != NULL){
					 	printf("O elemento foi encontrado na arvore\n");
					 }
					 else printf("Elemento nao encontrado\n");
					 getchar();
					 break;
					 
			case 4 : esvaziar (&arvore);
					 break;
					 
			case 5 : printf("PreOrdem: ");
					 exibirPreOrdem(arvore);
					 printf("\n");
					 getchar();
					 printf("InOrdem: ");
					 exibirInOrdem(arvore);
					 printf("\n");
					 getchar();
					 printf("PosOrdem: ");
					 exibirPosOrdem(arvore);
					 printf("\n");
					 getchar();
					 exibirGraficamente(arvore, 70, 16 , 5);
					 printf("\n");
					 getchar();
					 break;
					 
			case 0 : laco = 0;
					 break;				 				 				 				 
		}
		system("cls");
	}
}

